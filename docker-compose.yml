version: '3.9'
services:
  fizz:
    image: mendhak/http-https-echo:23
    container_name: "fizz"
    hostname: "fizz"
    domainname: "example.local"
    environment:
        - HTTP_PORT=80
        - HTTPS_PORT=443
    ports:
      - "9080:80"
      - "9443:443"
    networks:
      - private
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fizz.rule=Host(`reference.example.local`)"
      - "traefik.http.routers.fizz.entrypoints=web"
      - "traefik.http.services.fizz.loadbalancer.server.port=80"

  buzz:
    image: mendhak/http-https-echo:23
    container_name: "buzz"
    hostname: "buzz"
    domainname: "example.local"
    environment:
        - HTTP_PORT=80  
        - HTTPS_PORT=443 
    ports: 
      - "9081:80"    
      - "9444:443"
    networks:
      - private
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fizz.rule=Host(`reference.example.local`)"                                                         
      - "traefik.http.routers.fizz.entrypoints=web"             
      - "traefik.http.services.fizz.loadbalancer.server.port=80"

  referencelb:
    image: traefik:v2.6
    container_name: referencelb
    hostname: "reference"
    domainname: "example.local"
    restart: unless-stopped
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--api.insecure=true" 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entrypoints.web.address=:80"
    networks:
      - public
      - private
    ports:
      # The HTTP port
      - "8086:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8081:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #- ./letsencrypt:/letsencrypt

  demo:
    build: .
    container_name: demolb
    hostname: "demo"
    domainname: "example.local"
    restart: unless-stopped
    env_file: 
      - ./app.env
    configs:
      - source: demo_config
        target: /root/app.env
    environment:
      - "LB_PORT=${PORT}"
      - "LB_TARGET_LIST=${TARGET_LIST}"
    ports:
      - "3030:${PORT}"
    networks:
      - public
      - private

configs:
  demo_config:
    file: ./app.env

networks:
  public:
    name: DockerPublic
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.name: "DockerPublic0"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
  private:
    name: DockerPrivate
    driver: bridge 
    driver_opts: 
      com.docker.network.bridge.enable_icc: "true" 
      com.docker.network.bridge.enable_ip_masquerade: "false" 
      com.docker.network.bridge.name: "DockerPrivate0" 


